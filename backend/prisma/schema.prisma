// Prisma schema for CAG Live2 Secure Backend

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User roles enum
enum Role {
  admin
  user
  guest
}

// Security clearance levels
enum ClearanceLevel {
  NONE
  PUBLIC_TRUST
  SECRET
  TOP_SECRET
  TOP_SECRET_SCI
  TS_SCI_POLY
}

// User model with security features
model User {
  id                    String         @id @default(uuid())
  email                 String         @unique
  password              String         // Bcrypt hashed
  firstName             String
  lastName              String
  role                  Role           @default(user)
  clearanceLevel        ClearanceLevel @default(NONE)
  
  // Security fields
  isActive              Boolean        @default(true)
  isVerified            Boolean        @default(false)
  verificationToken     String?        @unique
  emailVerifiedAt       DateTime?
  passwordResetToken    String?        @unique
  passwordResetExpires  DateTime?
  passwordChangedAt     DateTime?
  failedLoginAttempts   Int            @default(0)
  lastFailedLogin       DateTime?
  lastLogin             DateTime?
  twoFactorSecret       String?        // Encrypted
  twoFactorEnabled      Boolean        @default(false)
  
  // Timestamps
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  
  // Relations
  settings              UserSettings?
  sessions              Session[]
  auditLogs             AuditLog[]
  resumes               Resume[]
  applications          Application[]
  securityEvents        SecurityEvent[]
  
  @@index([email])
  @@index([clearanceLevel])
  @@index([role])
}

// User settings
model UserSettings {
  id                    String    @id @default(uuid())
  userId                String    @unique
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  emailNotifications    Boolean   @default(true)
  smsNotifications      Boolean   @default(false)
  darkMode              Boolean   @default(false)
  language              String    @default("en")
  timezone              String    @default("UTC")
  
  // Privacy settings
  profileVisibility     String    @default("private") // public, cleared, private
  showClearanceLevel    Boolean   @default(false)
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

// Session management
model Session {
  id                    String    @id @default(uuid())
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  token                 String    @unique
  refreshToken          String?   @unique
  deviceFingerprint     String?
  ipAddress             String
  userAgent             String?
  
  expiresAt             DateTime
  createdAt             DateTime  @default(now())
  lastActivity          DateTime  @default(now())
  
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}

// Audit logging
model AuditLog {
  id                    String    @id @default(uuid())
  userId                String?
  user                  User?     @relation(fields: [userId], references: [id])
  
  action                String    // CREATE, UPDATE, DELETE, ACCESS
  resource              String    // user, resume, job, etc.
  resourceId            String?
  
  ipAddress             String
  userAgent             String?
  
  // Change tracking
  oldValues             Json?
  newValues             Json?
  
  // Security
  hash                  String    // Integrity hash
  
  timestamp             DateTime  @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
}

// Security events
model SecurityEvent {
  id                    String    @id @default(uuid())
  userId                String?
  user                  User?     @relation(fields: [userId], references: [id])
  
  eventType             String    // LOGIN_SUCCESS, LOGIN_FAILED, etc.
  severity              String    // LOW, MEDIUM, HIGH, CRITICAL
  
  ipAddress             String
  userAgent             String?
  
  details               Json
  
  timestamp             DateTime  @default(now())
  
  @@index([userId])
  @@index([eventType])
  @@index([severity])
  @@index([timestamp])
}

// Resume management
model Resume {
  id                    String    @id @default(uuid())
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title                 String
  content               Json      // Encrypted resume data
  
  // Security
  isPublic              Boolean   @default(false)
  clearanceRequired     ClearanceLevel @default(NONE)
  
  // Versioning
  version               Int       @default(1)
  previousVersionId     String?
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  applications          Application[]
  
  @@index([userId])
  @@index([isPublic])
}

// Job postings
model Job {
  id                    String    @id @default(uuid())
  
  title                 String
  company               String
  location              String
  description           String    @db.Text
  requirements          String[]
  
  // Security requirements
  clearanceRequired     ClearanceLevel @default(NONE)
  citizenshipRequired   String[]  @default(["US"])
  
  // Job details
  salary                Json?     // Encrypted salary range
  remote                Boolean   @default(false)
  type                  String    // FULL_TIME, PART_TIME, CONTRACT
  
  isActive              Boolean   @default(true)
  
  postedAt              DateTime  @default(now())
  expiresAt             DateTime?
  
  applications          Application[]
  
  @@index([clearanceRequired])
  @@index([isActive])
  @@index([postedAt])
}

// Job applications
model Application {
  id                    String    @id @default(uuid())
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobId                 String
  job                   Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  resumeId              String?
  resume                Resume?   @relation(fields: [resumeId], references: [id])
  
  status                String    @default("PENDING") // PENDING, REVIEWED, ACCEPTED, REJECTED
  coverLetter           String?   @db.Text
  
  appliedAt             DateTime  @default(now())
  reviewedAt            DateTime?
  
  @@unique([userId, jobId])
  @@index([status])
  @@index([appliedAt])
}

// Database backup tracking
model BackupLog {
  id                    String    @id @default(uuid())
  
  type                  String    // FULL, INCREMENTAL
  status                String    // STARTED, COMPLETED, FAILED
  
  size                  BigInt?
  duration              Int?      // seconds
  location              String?   // S3 path
  
  error                 String?
  
  startedAt             DateTime  @default(now())
  completedAt           DateTime?
  
  @@index([status])
  @@index([startedAt])
}